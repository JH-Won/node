{
  "version": 3,
  "sources": ["../../vuetify/src/components/VFooter/VFooter.tsx", "../../vuetify/src/composables/border.ts", "../../vuetify/src/composables/elevation.ts", "../../vuetify/src/composables/rounded.ts"],
  "sourcesContent": ["// Styles\nimport './VFooter.sass'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeLayoutItemProps, useLayoutItem } from '@/composables/layout'\nimport { useResizeObserver } from '@/composables/resizeObserver'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, shallowRef, toRef } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVFooterProps = propsFactory({\n  app: Boolean,\n  color: String,\n  height: {\n    type: [Number, String],\n    default: 'auto',\n  },\n\n  ...makeBorderProps(),\n  ...makeComponentProps(),\n  ...makeElevationProps(),\n  ...makeLayoutItemProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps({ tag: 'footer' }),\n  ...makeThemeProps(),\n}, 'VFooter')\n\nexport const VFooter = genericComponent()({\n  name: 'VFooter',\n\n  props: makeVFooterProps(),\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { borderClasses } = useBorder(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n\n    const autoHeight = shallowRef(32)\n    const { resizeRef } = useResizeObserver(entries => {\n      if (!entries.length) return\n      autoHeight.value = entries[0].target.clientHeight\n    })\n    const height = computed(() => props.height === 'auto' ? autoHeight.value : parseInt(props.height, 10))\n    const { layoutItemStyles, layoutIsReady } = useLayoutItem({\n      id: props.name,\n      order: computed(() => parseInt(props.order, 10)),\n      position: computed(() => 'bottom'),\n      layoutSize: height,\n      elementSize: computed(() => props.height === 'auto' ? undefined : height.value),\n      active: computed(() => props.app),\n      absolute: toRef(props, 'absolute'),\n    })\n\n    useRender(() => (\n      <props.tag\n        ref={ resizeRef }\n        class={[\n          'v-footer',\n          themeClasses.value,\n          backgroundColorClasses.value,\n          borderClasses.value,\n          elevationClasses.value,\n          roundedClasses.value,\n          props.class,\n        ]}\n        style={[\n          backgroundColorStyles.value,\n          props.app ? layoutItemStyles.value : {\n            height: convertToUnit(props.height),\n          },\n          props.style,\n        ]}\n        v-slots={ slots }\n      />\n    ))\n\n    return props.app ? layoutIsReady : {}\n  },\n})\n\nexport type VFooter = InstanceType<typeof VFooter>\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nexport interface BorderProps {\n  border?: boolean | number | string\n}\n\n// Composables\nexport const makeBorderProps = propsFactory({\n  border: [Boolean, Number, String],\n}, 'border')\n\nexport function useBorder (\n  props: BorderProps,\n  name = getCurrentInstanceName(),\n) {\n  const borderClasses = computed(() => {\n    const border = isRef(props) ? props.value : props.border\n    const classes: string[] = []\n\n    if (border === true || border === '') {\n      classes.push(`${name}--border`)\n    } else if (\n      typeof border === 'string' ||\n      border === 0\n    ) {\n      for (const value of String(border).split(' ')) {\n        classes.push(`border-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { borderClasses }\n}\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nexport interface ElevationProps {\n  elevation?: number | string | null\n}\n\n// Composables\nexport const makeElevationProps = propsFactory({\n  elevation: {\n    type: [Number, String],\n    validator (v: any) {\n      const value = parseInt(v)\n\n      return (\n        !isNaN(value) &&\n        value >= 0 &&\n        // Material Design has a maximum elevation of 24\n        // https://material.io/design/environment/elevation.html#default-elevations\n        value <= 24\n      )\n    },\n  },\n}, 'elevation')\n\ntype ElevationData = {\n  elevationClasses: Ref<string[]>\n}\n\nexport function useElevation (props: ElevationProps | Ref<number | string | undefined>): ElevationData {\n  const elevationClasses = computed(() => {\n    const elevation = isRef(props) ? props.value : props.elevation\n    const classes: string[] = []\n\n    if (elevation == null) return classes\n\n    classes.push(`elevation-${elevation}`)\n\n    return classes\n  })\n\n  return { elevationClasses }\n}\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype RoundedValue = boolean | string | number | null | undefined\n\nexport interface RoundedProps {\n  rounded?: RoundedValue\n  tile?: boolean\n}\n\ntype RoundedData = {\n  roundedClasses: Ref<string[]>\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n  tile: Boolean,\n}, 'rounded')\n\nexport function useRounded (\n  props: RoundedProps | Ref<RoundedValue>,\n  name = getCurrentInstanceName(),\n): RoundedData {\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded\n    const tile = isRef(props) ? props.value : props.tile\n    const classes: string[] = []\n\n    if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (\n      typeof rounded === 'string' ||\n      rounded === 0\n    ) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    } else if (tile || rounded === false) {\n      classes.push('rounded-0')\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n"],
  "mappings": "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",
  "names": ["makeBorderProps", "propsFactory", "border", "Boolean", "Number", "String", "useBorder", "props", "name", "arguments", "length", "undefined", "getCurrentInstanceName", "borderClasses", "computed", "isRef", "value", "classes", "push", "split", "makeElevationProps", "propsFactory", "elevation", "type", "Number", "String", "validator", "v", "value", "parseInt", "isNaN", "useElevation", "props", "elevationClasses", "computed", "isRef", "classes", "push", "makeRoundedProps", "propsFactory", "rounded", "type", "Boolean", "Number", "String", "default", "undefined", "tile", "useRounded", "props", "name", "arguments", "length", "getCurrentInstanceName", "roundedClasses", "computed", "isRef", "value", "classes", "push", "split", "makeVFooterProps", "propsFactory", "app", "Boolean", "color", "String", "height", "type", "Number", "default", "makeBorderProps", "makeComponentProps", "makeElevationProps", "makeLayoutItemProps", "makeRoundedProps", "makeTagProps", "tag", "makeThemeProps", "VFooter", "genericComponent", "name", "props", "setup", "_ref", "slots", "themeClasses", "provideTheme", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "toRef", "borderClasses", "useBorder", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "autoHeight", "shallowRef", "resizeRef", "useResizeObserver", "entries", "length", "value", "target", "clientHeight", "computed", "parseInt", "layoutItemStyles", "layoutIsReady", "useLayoutItem", "id", "order", "position", "layoutSize", "elementSize", "undefined", "active", "absolute", "useRender", "_createVNode", "class", "convertToUnit", "style"]
}
